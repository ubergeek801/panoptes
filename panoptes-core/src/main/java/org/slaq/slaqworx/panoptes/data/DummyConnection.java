package org.slaq.slaqworx.panoptes.data;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * A no-op SQL {@link Connection} that exists merely to make transaction-management code happy in
 * test and standalone environments.
 *
 * @author jeremy
 */
public class DummyConnection implements Connection {
  /**
   * Creates a new {@link DummyConnection}.
   */
  public DummyConnection() {
    // nothing to do
  }

  @Override
  public void abort(Executor executor) {
    // nothing to do
  }

  @Override
  public void clearWarnings() {
    // nothing to do
  }

  @Override
  public void close() {
    // nothing to do
  }

  @Override
  public void commit() {
    // nothing to do
  }

  @Override
  public Array createArrayOf(String typeName, Object[] elements) {
    return null;
  }

  @Override
  public Blob createBlob() {
    return null;
  }

  @Override
  public Clob createClob() {
    return null;
  }

  @Override
  public NClob createNClob() {
    return null;
  }

  @Override
  public SQLXML createSQLXML() {
    return null;
  }

  @Override
  public Statement createStatement() {
    return null;
  }

  @Override
  public Statement createStatement(int resultSetType, int resultSetConcurrency) {
    return null;
  }

  @Override
  public Statement createStatement(int resultSetType, int resultSetConcurrency,
      int resultSetHoldability) {
    return null;
  }

  @Override
  public Struct createStruct(String typeName, Object[] attributes) {
    return null;
  }

  @Override
  public boolean getAutoCommit() {
    return false;
  }

  @Override
  public void setAutoCommit(boolean autoCommit) {
    // nothing to do
  }

  @Override
  public String getCatalog() {
    return null;
  }

  @Override
  public void setCatalog(String catalog) {
    // nothing to do
  }

  @Override
  public Properties getClientInfo() {
    return null;
  }

  @Override
  public void setClientInfo(Properties properties) {
    // nothing to do
  }

  @Override
  public String getClientInfo(String name) {
    return null;
  }

  @Override
  public int getHoldability() {
    return 0;
  }

  @Override
  public void setHoldability(int holdability) {
    // nothing to do
  }

  @Override
  public DatabaseMetaData getMetaData() {
    return null;
  }

  @Override
  public int getNetworkTimeout() {
    return 0;
  }

  @Override
  public String getSchema() {
    return null;
  }

  @Override
  public void setSchema(String schema) {
    // nothing to do
  }

  @Override
  public int getTransactionIsolation() {
    return Connection.TRANSACTION_NONE;
  }

  @Override
  public void setTransactionIsolation(int level) {
    // nothing to do
  }

  @Override
  public Map<String, Class<?>> getTypeMap() {
    return null;
  }

  @Override
  public void setTypeMap(Map<String, Class<?>> map) {
    // nothing to do
  }

  @Override
  public SQLWarning getWarnings() {
    return null;
  }

  @Override
  public boolean isClosed() {
    return false;
  }

  @Override
  public boolean isReadOnly() {
    return false;
  }

  @Override
  public void setReadOnly(boolean readOnly) {
    // nothing to do
  }

  @Override
  public boolean isValid(int timeout) {
    return false;
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) {
    return false;
  }

  @Override
  public String nativeSQL(String sql) {
    return null;
  }

  @Override
  public CallableStatement prepareCall(String sql) {
    return null;
  }

  @Override
  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) {
    return null;
  }

  @Override
  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency,
      int resultSetHoldability) {
    return null;
  }

  @Override
  public PreparedStatement prepareStatement(String sql) {
    return null;
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) {
    return null;
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType,
      int resultSetConcurrency) {
    return null;
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency,
      int resultSetHoldability) {
    return null;
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int[] columnIndexes) {
    return null;
  }

  @Override
  public PreparedStatement prepareStatement(String sql, String[] columnNames) {
    return null;
  }

  @Override
  public void releaseSavepoint(Savepoint savepoint) {
    // nothing to do
  }

  @Override
  public void rollback() {
    // nothing to do
  }

  @Override
  public void rollback(Savepoint savepoint) {
    // nothing to do
  }

  @Override
  public void setClientInfo(String name, String value) {
    // nothing to do
  }

  @Override
  public void setNetworkTimeout(Executor executor, int milliseconds) {
    // nothing to do
  }

  @Override
  public Savepoint setSavepoint() {
    return null;
  }

  @Override
  public Savepoint setSavepoint(String name) {
    return null;
  }

  @Override
  public <T> T unwrap(Class<T> iface) {
    return null;
  }
}
